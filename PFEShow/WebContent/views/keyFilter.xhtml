<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:pe="http://primefaces.org/ui/extensions">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="KeyFilter"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            KeyFilter can be used to filter keyboard input on specified input components. Below is also a list with predefined masks and their regular expressions.
        </h:panelGroup>

        <h:panelGroup layout="block" styleClass="centerExample">
            <h:panelGrid columns="1" columnClasses="formColumn">
                <h:outputText value="KeyFilter with mask 'num' on a p:inputText (only digits)"/>
                <p:inputText id="text1" required="true" style="margin-bottom: 10px;"/>
                <h:outputText value="KeyFilter with regEx /[ABC]/i on a h:inputText"/>
                <h:inputText id="text2" style="margin-bottom: 10px;">
                    <pe:keyFilter regEx="/[ABC]/i"/>
                </h:inputText>
                <h:outputText value="KeyFilter with testFunction on a p:autoComplete"/>
                <p:autoComplete id="autoComplete1" value="#{autoCompleteController.text}"
                                completeMethod="#{autoCompleteController.complete}" style="margin-bottom: 10px;"/>
            </h:panelGrid>
            
            <pe:keyFilter for="text1" mask="num"/>
            <pe:keyFilter for="autoComplete1" testFunction="return c == 'z';"/>
            <p/>
            <table>
            	<tr><td><strong>pint</strong></td>		<td>/[\d]/</td>				<td></td></tr>
            	<tr><td><strong>int</strong></td>		<td>/[\d\-]/</td>			<td></td></tr>
            	<tr><td><strong>pnum</strong></td>		<td>/[\d\.]/</td>			<td></td></tr>
            	<tr><td><strong>money</strong></td>		<td>/[\d\.\s,]</td>			<td></td></tr>
            	<tr><td><strong>num</strong></td>		<td>/[\d\-\.]/</td>			<td></td></tr>
            	<tr><td><strong>hex</strong></td>		<td>/[0-9a-f]/i</td>		<td></td></tr>
            	<tr><td><strong>email</strong></td>		<td>/[a-z0-9_\.\-@]/i</td>	<td></td></tr>
            	<tr><td><strong>alpha</strong></td>		<td>/[a-z_]/i</td>			<td></td></tr>
            	<tr><td><strong>alphanum</strong></td>	<td>/[a-z0-9_]/i </td>		<td></td></tr>
            </table>            
        </h:panelGroup>

        <ui:decorate template="/templates/twoTabsDecorator.xhtml">
            <ui:define name="contentTab1">
&lt;h:panelGrid columns=&quot;1&quot; columnClasses=&quot;formColumn&quot;&gt;
    &lt;h:outputText value=&quot;KeyFilter with mask on a p:inputText&quot;/&gt;
    &lt;p:inputText id=&quot;text1&quot; required=&quot;true&quot; style=&quot;margin-bottom: 10px;&quot;/&gt;
    &lt;h:outputText value=&quot;KeyFilter with regEx on a h:inputText&quot;/&gt;
    &lt;h:inputText id=&quot;text2&quot; style=&quot;margin-bottom: 10px;&quot;&gt;
        &lt;pe:keyFilter regEx=&quot;/[ABC]/i&quot;/&gt;
    &lt;/h:inputText&gt;
    &lt;h:outputText value=&quot;KeyFilter with testFunction on a p:autoComplete&quot;/&gt;
    &lt;p:autoComplete id=&quot;autoComplete1&quot; value=&quot;\#{autoCompleteController.text}&quot;
                    completeMethod=&quot;\#{autoCompleteController.complete}&quot; style=&quot;margin-bottom: 10px;&quot;/&gt;
&lt;/h:panelGrid&gt;

&lt;pe:keyFilter for=&quot;text1&quot; mask=&quot;num&quot;/&gt;
&lt;pe:keyFilter for=&quot;autoComplete1&quot; testFunction=&quot;return c == 'z';&quot;/&gt;
            </ui:define>
            <ui:define name="contentTab2">
@ManagedBean
@RequestScoped
public class AutoCompleteController {

	private String text;

	public List&lt;String&gt; complete(final String query) {
		final List&lt;String&gt; results = new ArrayList&lt;String&gt;();

		for (int i = 0; i &lt; 10; i++) {
			results.add(query + i);
		}

		return results;
	}

	public final String getText() {
		return text;
	}

	public final void setText(String text) {
		this.text = text;
	}
}	
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">

    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/documentation.xhtml">
            <ui:param name="tagName" value="keyFilter"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>

